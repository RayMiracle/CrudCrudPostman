{
	"info": {
		"_postman_id": "1dc165d2-3156-4496-b5e3-c80d2a4e7b1f",
		"name": "UnicornFarm",
		"description": "## Postman Collection: Unicorn CRUD Automation\n\nThis Postman collection is designed to automate **Create, Read, Update, and Delete (CRUD)** operations for a unicorn API, ensuring data integrity and API functionality.\n\n---\n\n### Key Features & Workflow:\n\n- **Create Unicorn:** Adds a new unicorn resource.\n    \n- **Check New Unicorn Data:** Verifies the details of the newly created unicorn, including a **status code (200)** and comprehensive **schema validation** of the response body. It also saves the **full response body** and the `_id` of the created unicorn into collection variables (`fullApiResponse` and `unicornId`) for subsequent requests.\n    \n- **Update Unicorn Data:** Modifies the existing unicorn's data using the `unicornId`.\n    \n- **Check Unicorn New Data:** Confirms the unicorn's data has been successfully updated, performing **status code (200)** and **deep equality checks** against the previously saved response data (with updates applied).\n    \n- **Delete Unicorn:** Removes the unicorn resource using its `unicornId`.\n    \n- **Check Unicorn Does Not Exist:** Verifies that the unicorn has been successfully deleted by attempting to retrieve it, expecting a **404 Not Found** status code.\n    \n- **Dynamic Flow Control:** Utilizes `postman.setNextRequest()` logic within tests to intelligently control the execution order, **skipping redundant requests** and ensuring a streamlined, efficient test run.\n    \n- **Variable Management:** Leverages an **environment variable (****`baseURL`****)** for API endpoint flexibility and **collection variables (****`unicornId`****,** **`fullApiResponse`****,** **`getCallCount`****,** **`deleteCallCount`****)** for data persistence and sequential test execution tracking across requests.\n    \n- **Robust Validations:** Incorporates **status code assertions**, **Ajv JSON schema validations** for response structure, and **deep equality checks** for response body content verification.\n    \n- **Automated Cleanup:** Includes logic to **clear all collection variables** at the end of the test run, ensuring a clean state for subsequent executions.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18553258",
		"_collection_link": "https://www.postman.com/dummyteam-6534/workspace/radim-blek-crudcrud-com/collection/18553258-1dc165d2-3156-4496-b5e3-c80d2a4e7b1f?action=share&source=collection_link&creator=18553258"
	},
	"item": [
		{
			"name": "Create a new unicorn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the response body as a JSON object\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"// Initialize Ajv\r",
							"// { allErrors: true } option to see all validation errors, not just the first one.\r",
							"const Ajv = require('ajv');\r",
							"const ajv = new Ajv({ allErrors: true });\r",
							"\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"name\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"age\": {\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"        \"colour\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"_id\": {\r",
							"            \"type\": \"string\",\r",
							"            \"pattern\": \"^[0-9a-fA-F]{24}$\" // It validates if it is 24-character hexadecimal string\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\r",
							"        \"name\",\r",
							"        \"age\",\r",
							"        \"colour\",\r",
							"        \"_id\"\r",
							"    ],\r",
							"    \"additionalProperties\": false // It ensures no extra properties are allowed beyond what's defined\r",
							"};\r",
							"\r",
							"// --- Test 1: Status Code Validation ---\r",
							"let statusCodePassed = false; // Flag to track status code test\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    statusCodePassed = true; // Set flag to true if this test passes\r",
							"});\r",
							"\r",
							"// --- Test 2: Schema Validation ---\r",
							"let schemaValidationPassed = false; // Flag to track schema validation test\r",
							"pm.test(\"Response body schema is valid (using Ajv)\", function () {\r",
							"    const valid = ajv.validate(schema, jsonData);\r",
							"    pm.expect(valid).to.be.true;\r",
							"\r",
							"    // Log validation errors if the test fails for debugging\r",
							"    if (valid) {\r",
							"        schemaValidationPassed = true; // Set flag to true if this test passes\r",
							"    } else {\r",
							"        console.error(\"Schema validation failed (Ajv):\", ajv.errors);\r",
							"        // Stringify the errors for a more readable output in the test results\r",
							"        throw new Error(\"Schema validation failed: \" + JSON.stringify(ajv.errors, null, 2));\r",
							"    }\r",
							"});\r",
							"\r",
							"// --- Test 3: Verify _id returned and save it into collection variable ---\r",
							"// This test will only proceed to save the ID if previous checks pass\r",
							"pm.test(\"Verify _id returned and save it into collection variable\", function () {\r",
							"    pm.expect(jsonData._id).to.exist;\r",
							"    pm.expect(jsonData._id).to.be.a('string');\r",
							"    pm.expect(jsonData._id).to.have.lengthOf.at.least(1);\r",
							"\r",
							"    // Save the _id into a collection variable for future requests\r",
							"    pm.collectionVariables.set(\"unicornId\", jsonData._id);\r",
							"    console.log(\"Saved unicornId:\", pm.collectionVariables.get(\"unicornId\"));\r",
							"});\r",
							"\r",
							"// --- Conditional Saving of Full Response ---\r",
							"// This block runs after all tests. It will only save the full response\r",
							"// if both the status code and schema validation tests passed successfully.\r",
							"if (statusCodePassed && schemaValidationPassed) {\r",
							"    const responseBodyString = JSON.stringify(jsonData);\r",
							"    pm.collectionVariables.set(\"fullApiResponse\", responseBodyString);\r",
							"    console.log(\"Full response saved to 'fullApiResponse' collection variable because all tests passed.\");\r",
							"\r",
							"    // Added a test for this action for clarity in test results\r",
							"    pm.test(\"Full response successfully saved to collection variable\", function() {\r",
							"        pm.expect(pm.collectionVariables.get(\"fullApiResponse\")).to.be.a('string');\r",
							"        pm.expect(pm.collectionVariables.get(\"fullApiResponse\")).to.have.lengthOf.at.least(1);\r",
							"    });\r",
							"} else {\r",
							"    console.warn(\"Full response NOT saved to 'fullApiResponse' because not all required tests passed.\");\r",
							"    console.log(\"Stopping the collection run.\");\r",
							"    pm.execution.setNextRequest(null); // Stop the collection run\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Alfa Test\",\r\n    \"age\": 21,\r\n    \"colour\": \"grey\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/unicorns",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"unicorns"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get the new unicorn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the current call count for the GET request from a collection variable\r",
							"let callCount = pm.collectionVariables.get(\"getCallCount\");\r",
							"\r",
							"// Initialize callCount if it doesn't exist\r",
							"if (typeof callCount === 'undefined' || callCount === null) {\r",
							"    console.log(\"Initializing 'getCallCount' to 0.\");\r",
							"    callCount = 0;\r",
							"} else {\r",
							"    callCount = parseInt(callCount, 10); // Ensure it's a number\r",
							"}\r",
							"\r",
							"// Increment the call count for this execution\r",
							"callCount++;\r",
							"\r",
							"// Save the updated count back to the collection variable\r",
							"pm.collectionVariables.set(\"getCallCount\", callCount);\r",
							"\r",
							"console.log(`GET request called ${callCount} time(s).`);\r",
							"\r",
							"// --- Logic for Response Body & Status Code Validation ---\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"if (callCount === 1 || callCount === 2) {\r",
							"    // For 1st and 2nd calls: Expect 200 OK and verify body match\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"    // Get the stringified response from the collection variable\r",
							"    const savedApiResponseString = pm.collectionVariables.get(\"fullApiResponse\");\r",
							"    // Ensure savedApiResponseString exists before parsing, to prevent errors\r",
							"    if (savedApiResponseString) {\r",
							"        // Parse the string back into a JavaScript object\r",
							"        const savedApiResponse = JSON.parse(savedApiResponseString);\r",
							"        pm.test(\"Verify whole response body matches\", () => {\r",
							"            pm.expect(savedApiResponse).to.deep.equal(jsonData);\r",
							"        });\r",
							"    } else {\r",
							"        // This case would happen if fullApiResponse isn't set yet\r",
							"        console.warn(\"savedApiResponse is not available for comparison yet.\");\r",
							"    }\r",
							"\r",
							"} else if (callCount === 3) {\r",
							"    // For 3rd call: Expect 404 Not Found\r",
							"    pm.test(\"Status code is 404\", function () {\r",
							"        pm.response.to.have.status(404);\r",
							"    });\r",
							"    console.log(\"Third call: 404 status expected.\");\r",
							"\r",
							"} else {\r",
							"    // Handle calls beyond the 3rd: Stop the collection run\r",
							"    console.log(`Call ${callCount}: Stopping collection run.`);\r",
							"    pm.execution.setNextRequest(null); // Stop the collection run\r",
							"}\r",
							"\r",
							"// --- Logic for Next Request ---\r",
							"if (callCount === 1) {\r",
							"    // First call: Continue with the next request in the collection runner's sequence\r",
							"    console.log(\"First call: Continuing with default next request.\");\r",
							"} else if (callCount === 2 || callCount === 3) {\r",
							"    // Second & Third call: Jump to a specific request\r",
							"    console.log(\"Jumping to 'Delete the new unicorn'.\");\r",
							"    pm.execution.setNextRequest(\"Delete the new unicorn\");\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/unicorns/{{unicornId}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"unicorns",
						"{{unicornId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update the new unicorn",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the stringified response from the collection variable\r",
							"let savedApiResponseString = pm.collectionVariables.get(\"fullApiResponse\");\r",
							"\r",
							"// Parse the string back into a JavaScript object\r",
							"let savedApiResponse = JSON.parse(savedApiResponseString);\r",
							"\r",
							"// Modify other properties as needed for the update\r",
							"savedApiResponse.name = \"Beta Test\";\r",
							"savedApiResponse.age = 22;\r",
							"savedApiResponse.colour = \"black\";\r",
							"\r",
							"// Update original full response body to use it in the GET call\r",
							"savedApiResponseString = JSON.stringify(savedApiResponse);\r",
							"pm.collectionVariables.set(\"fullApiResponse\", savedApiResponseString);\r",
							"\r",
							"// Remove the _id property from the object because it is not needed in the request body\r",
							"delete savedApiResponse._id;\r",
							"\r",
							"// Set the raw request body with the modified object (without _id)\r",
							"pm.request.body.raw = JSON.stringify(savedApiResponse);\r",
							"\r",
							"// Log the request body to the console to verify what's being sent\r",
							"console.log(\"PUT Request Body (excluding _id):\", savedApiResponse);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// --- Test 1: Status Code Validation ---\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.execution.setNextRequest(\"Get the new unicorn\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseURL}}/unicorns/{{unicornId}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"unicorns",
						"{{unicornId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete the new unicorn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the current call count for the DELETE request from a collection variable\r",
							"let deleteCallCount = pm.collectionVariables.get(\"deleteCallCount\");\r",
							"\r",
							"// Initialize deleteCallCount if it doesn't exist\r",
							"if (typeof deleteCallCount === 'undefined' || deleteCallCount === null) {\r",
							"    console.log(\"Initializing 'deleteCallCount' to 0.\");\r",
							"    deleteCallCount = 0;\r",
							"} else {\r",
							"    deleteCallCount = parseInt(deleteCallCount, 10); // Ensure it's a number\r",
							"}\r",
							"\r",
							"// Increment the call count for this execution\r",
							"deleteCallCount++;\r",
							"\r",
							"// Save the updated count back to the collection variable\r",
							"pm.collectionVariables.set(\"deleteCallCount\", deleteCallCount);\r",
							"\r",
							"console.log(`DELETE request called ${deleteCallCount} time(s).`);\r",
							"\r",
							"// --- Logic for Status Code Validation and Next Request ---\r",
							"if (deleteCallCount === 1) {\r",
							"    // 1st call: Expect 200 OK (successful deletion)\r",
							"    pm.test(\"Status code is 200 (first delete call)\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"    console.log(\"First delete call: 200 status expected.\");\r",
							"    \r",
							"    // After the first successful delete, the resource should no longer exist.\r",
							"    console.log(\"Jumping to 'Get the new unicorn'.\");\r",
							"    pm.execution.setNextRequest(\"Get the new unicorn\");\r",
							"\r",
							"} else if (deleteCallCount === 2) {\r",
							"    // 2nd call: Expect 404 Not Found (resource already deleted)\r",
							"    pm.test(\"Status code is 404 (second delete call)\", function () {\r",
							"        pm.response.to.have.status(404);\r",
							"    });\r",
							"    console.log(\"Second delete call: 404 status expected.\");\r",
							"\r",
							"    // --- Clear all collection variables (after the 2nd call completes) ---\r",
							"    pm.collectionVariables.clear();\r",
							"    console.log(\"All collection variables cleared.\");\r",
							"\r",
							"    pm.test(\"All collection variables are cleared\", function () {\r",
							"        pm.expect(pm.collectionVariables.get(\"getCallCount\")).to.be.undefined; // Verify a specific variable is gone\r",
							"        pm.expect(pm.collectionVariables.get(\"deleteCallCount\")).to.be.undefined; // Verify this counter is also gone\r",
							"    });\r",
							"\r",
							"    // --- Stop the collection run after clearing variables ---\r",
							"    pm.execution.setNextRequest(null);\r",
							"    console.info(\"The 'UnicornFarm' collection run completed.\");\r",
							"\r",
							"} else {\r",
							"    // Handle unexpected call counts (e.g., if this delete is called more than twice)\r",
							"    console.warn(`DELETE request called more than twice (${deleteCallCount} times). Stopping collection.`);\r",
							"    pm.execution.setNextRequest(null);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/unicorns/{{unicornId}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"unicorns",
						"{{unicornId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}